stages:
  - build
  - test
  - publish
  - deploy

variables:
  TAG_LATEST: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest
  TAG_COMMIT: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA

build-job:
  stage: build
  image: tmaier/docker-compose:latest

  services:
    - docker:19-dind

  variables:
  # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""

  before_script:
    - docker info
    - docker-compose --version

  script:
    - echo "Hello, $GITLAB_USER_LOGIN!"
    - docker-compose build

pytest:
  stage: test

  # Official framework image. Look for the different tagged releases at:
  # https://hub.docker.com/r/library/python
  image: python:latest

  # Pick zero or more services to be used on all builds.
  # Only needed when using a docker container to run your tests in.
  # Check out: http://docs.gitlab.com/ee/ci/docker/using_docker_images.html#what-is-a-service
  services:
    - postgres:latest

  variables:
    POSTGRES_DB: database_name

  # This folder is cached between builds
  # http://docs.gitlab.com/ee/ci/yaml/README.html#cache
  cache:
    paths:
      - ~/.cache/pip/

  # This is a basic example for a gem or script which doesn't use
  # services such as redis or postgres
  before_script:
    - python -V  # Print out python version for debugging
    # Uncomment next line if your Django app needs a JS runtime:
    # - apt-get update -q && apt-get install nodejs -yqq
    - pip3 install -r requirements.txt


  script:
    - cd backend
    - pytest

publish:
  image: docker:latest
  stage: publish
  services:
    - docker:19-dind
  script:
    - docker build -t $TAG_COMMIT -t $TAG_LATEST .
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker push $TAG_COMMIT
    - docker push $TAG_LATEST

deploy:
  image: tmaier/docker-compose:latest
  stage: deploy
  tags:
    - deployment
  script:
    - chmod og= $ID_RSA
    - apk update && apk add openssh-client
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull $TAG_COMMIT"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker container rm -f explorateur-par-nature-fr || true"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run -d -p 80:80 --name explorateur-par-nature-fr $TAG_COMMIT"
  environment:
    name: production
    url: http://161.35.88.211
  only:
    - main
